{"version":3,"sources":["types/sortType.ts","constants/goodsFromServer.ts","App.tsx","helpers/getGoodsList.ts","index.tsx"],"names":["SortType","goodsFromServer","App","useState","targetInnerText","setTargetInnerText","isReversed","setIsReversed","visibleGoods","goods","sortField","preparedGoods","sort","good1","good2","Alphabetically","localeCompare","Length","length","reverse","getGoodsList","handleSort","e","currentTarget","innerText","className","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,8CCACC,G,YAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,Y,SDVUD,K,qCAAAA,E,yBAAAA,M,uBEUCE,EAAM,WACjB,MAA8CC,mBAA4B,IAA1E,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,ECXoB,SAC1BC,EACAC,EACAJ,GAEA,IAAMK,EAAa,YAAOF,GAmB1B,OAjBIC,GACFC,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQJ,GACN,KAAKV,EAASe,eACZ,OAAOF,EAAMG,cAAcF,GAC7B,KAAKd,EAASiB,OACZ,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXZ,GACFK,EAAcQ,UAGTR,EDbcS,CACnBnB,EAAiBG,EAAiBE,GAG9Be,EAAa,SAACC,GAClBjB,EAAmBiB,EAAEC,cAAcC,YAYrC,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UACEE,IACE,iBACA,CAAE,WAAYvB,IAAoBJ,EAASe,iBAG/Ca,QAASP,EARX,SAUGrB,EAASe,iBAGZ,wBACEW,KAAK,SACLD,UACEE,IACE,oBACA,CAAE,WAAYvB,IAAoBJ,EAASiB,SAG/CW,QAASP,EARX,SAUGrB,EAASiB,SAGZ,wBACES,KAAK,SACLD,UACEE,IACE,oBACA,CAAE,YAAarB,IAGnBsB,QA9Ce,WACrBrB,GAAc,SAAAsB,GAAI,OAAKA,MAqCnB,sBAcGzB,GAAmBE,IAEhB,wBACEoB,KAAK,SACLD,UAAU,4BACVG,QArDM,WAClBvB,EAAmB,IACnBE,GAAc,IAgDJ,sBAWR,6BACGC,EAAasB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YErFlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.722802fa.chunk.js","sourcesContent":["export enum SortType {\n  Alphabetically = 'Sort alphabetically',\n  Length = 'Sort by length',\n}\n","export const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n","import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\n\nimport './App.scss';\n\nimport { goodsFromServer } from './constants/goodsFromServer';\nimport { SortType } from './types/sortType';\nimport { getGoodsList } from './helpers/getGoodsList';\n\nexport const App = () => {\n  const [targetInnerText, setTargetInnerText] = useState<SortType | string>('');\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getGoodsList(\n    goodsFromServer, targetInnerText, isReversed,\n  );\n\n  const handleSort = (e: React.MouseEvent<HTMLButtonElement>) => {\n    setTargetInnerText(e.currentTarget.innerText);\n  };\n\n  const handlleReverse = () => {\n    setIsReversed(prev => !prev);\n  };\n\n  const handleReset = () => {\n    setTargetInnerText('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button is-info',\n              { 'is-light': targetInnerText !== SortType.Alphabetically },\n            )\n          }\n          onClick={handleSort}\n        >\n          {SortType.Alphabetically}\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button is-success',\n              { 'is-light': targetInnerText !== SortType.Length },\n            )\n          }\n          onClick={handleSort}\n        >\n          {SortType.Length}\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn(\n              'button is-warning',\n              { 'is-light': !isReversed },\n            )\n          }\n          onClick={handlleReverse}\n        >\n          Reverse\n        </button>\n\n        {\n          (targetInnerText || isReversed)\n            && (\n              <button\n                type=\"button\"\n                className=\"button is-danger is-light\"\n                onClick={handleReset}\n              >\n                Reset\n              </button>\n            )\n        }\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { SortType } from '../types/sortType';\n\nexport const getGoodsList = (\n  goods: string[],\n  sortField: SortType | string,\n  isReversed: boolean,\n) => {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.Alphabetically:\n          return good1.localeCompare(good2);\n        case SortType.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}